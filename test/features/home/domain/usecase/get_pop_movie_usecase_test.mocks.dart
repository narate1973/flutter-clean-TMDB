// Mocks generated by Mockito 5.1.0 from annotations
// in nutthemovie/test/features/home/domain/usecase/get_pop_movie_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nutthemovie/features/home/domain/entity/cast_entity.dart'
    as _i6;
import 'package:nutthemovie/features/home/domain/entity/movie_list_entity.dart'
    as _i5;
import 'package:nutthemovie/features/home/domain/repository/movie_repo.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MovieRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepo extends _i1.Mock implements _i3.MovieRepo {
  MockMovieRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i5.MovieListEntity>> getPopMovie() =>
      (super.noSuchMethod(Invocation.method(#getPopMovie, []),
          returnValue: Future<_i2.Either<Exception, _i5.MovieListEntity>>.value(
              _FakeEither_0<Exception, _i5.MovieListEntity>())) as _i4
          .Future<_i2.Either<Exception, _i5.MovieListEntity>>);
  @override
  _i4.Future<_i2.Either<Exception, _i5.MovieListEntity>> getShowingMovie() =>
      (super.noSuchMethod(Invocation.method(#getShowingMovie, []),
          returnValue: Future<_i2.Either<Exception, _i5.MovieListEntity>>.value(
              _FakeEither_0<Exception, _i5.MovieListEntity>())) as _i4
          .Future<_i2.Either<Exception, _i5.MovieListEntity>>);
  @override
  _i4.Future<_i2.Either<Exception, _i6.CastListEntity>> getMovieCast(
          {String? movieID}) =>
      (super.noSuchMethod(
          Invocation.method(#getMovieCast, [], {#movieID: movieID}),
          returnValue: Future<_i2.Either<Exception, _i6.CastListEntity>>.value(
              _FakeEither_0<Exception, _i6.CastListEntity>())) as _i4
          .Future<_i2.Either<Exception, _i6.CastListEntity>>);
}
