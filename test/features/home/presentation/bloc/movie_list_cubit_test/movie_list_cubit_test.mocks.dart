// Mocks generated by Mockito 5.1.0 from annotations
// in nutthemovie/test/features/home/presentation/bloc/movie_list_cubit_test/movie_list_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nutthemovie/core/core.dart' as _i6;
import 'package:nutthemovie/features/home/domain/entity/movie_list_entity.dart'
    as _i7;
import 'package:nutthemovie/features/home/domain/repository/movie_repo.dart'
    as _i2;
import 'package:nutthemovie/features/home/domain/usecase/get_pop_movie_usecase.dart'
    as _i4;
import 'package:nutthemovie/features/home/domain/usecase/get_showing_movie_usecase.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieRepo_0 extends _i1.Fake implements _i2.MovieRepo {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetPopMovieUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopMovieUseCase extends _i1.Mock
    implements _i4.GetPopMovieUseCase {
  MockGetPopMovieUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepo get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#movieRepository),
          returnValue: _FakeMovieRepo_0()) as _i2.MovieRepo);
  @override
  _i5.FutureOr<_i3.Either<_i6.Failure, _i7.MovieListEntity>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.MovieListEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i7.MovieListEntity>()))
          as _i5.FutureOr<_i3.Either<_i6.Failure, _i7.MovieListEntity>>);
}

/// A class which mocks [GetShowingMovieUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetShowingMovieUseCase extends _i1.Mock
    implements _i8.GetShowingMovieUseCase {
  MockGetShowingMovieUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepo get movieRepository =>
      (super.noSuchMethod(Invocation.getter(#movieRepository),
          returnValue: _FakeMovieRepo_0()) as _i2.MovieRepo);
  @override
  _i5.FutureOr<_i3.Either<_i6.Failure, _i7.MovieListEntity>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.MovieListEntity>>.value(
                      _FakeEither_1<_i6.Failure, _i7.MovieListEntity>()))
          as _i5.FutureOr<_i3.Either<_i6.Failure, _i7.MovieListEntity>>);
}
